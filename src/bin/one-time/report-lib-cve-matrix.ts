import { pathExists, readJSON, writeFile } from 'fs-extra'
import { concat, join as joinFP, map, replace } from 'lodash/fp'
import { join } from 'path'
import R from 'ramda'
import { satisfies } from 'semver'
import { getLibNameVersions, libNameVersion } from '../../parseLibraries'
import { MainFn, TerminateFn } from '../_all.types'
import { SNYK_DB, SnykVuln } from '../../../data/vuln-db'

const VULN_LIB_FILENAME = 'lib-snyk-vuln.csv'
const LIBS_DIRNAME = 'sample_libs'
const LIBS_LIST_FILENAME = 'lib_names_versions.json'

export const environment = {
  SNYK_PATH: {},
}

export const main: MainFn<typeof environment> = async function main(log, { OUT, SNYK_PATH }) {
  const CSV_LIB_REPORT = join(OUT, VULN_LIB_FILENAME)
  const LIBS_PATH = join(SNYK_PATH, LIBS_DIRNAME)
  const LIBS_LIST_PATH = join(SNYK_PATH, LIBS_LIST_FILENAME)

  const allLibNVs = (await pathExists(LIBS_LIST_PATH))
    ? ((await readJSON(LIBS_LIST_PATH)) as libNameVersion[])
    : (await pathExists(LIBS_PATH))
      ? await getLibNameVersions(LIBS_PATH)
      : (() => {
          throw new Error('No libraries present')
        })()

  const nvVuln = map(
    ({ name, version }) => ({
      name,
      version,
      vuln: R.pipe(
        (x: SnykVuln[]) =>
          x.filter(
            R.pipe((x: SnykVuln) => x.semver.vulnerable, R.join(' || '), (v) =>
              satisfies(version, v),
            ),
          ),
        R.chain(
          R.pipe(
            (x: SnykVuln) => ({ ids: x.identifiers.ALTERNATIVE, published: x.publicationTime }),
            ({ ids, published }) => ({ ids: ids.filter(R.startsWith('SNYK-')), published }),
            ({ ids, published }) => R.map((id) => ({ id, published }), ids),
          ),
        ),
      )(SNYK_DB.npm[name]),
    }),
    allLibNVs,
  )

  log.info({ 'name-version-vuln': nvVuln }, 'vulnerabilities for each lib name-version')

  const allSnykVulnIdsSet = R.reduce(
    (acc, { vuln }) => R.reduce((acc, { id }) => acc.add(id), acc, vuln),
    new Set<string>(),
    nvVuln,
  )
  const allSnykVulnIds = [...allSnykVulnIdsSet]

  log.info({ 'all-seen-snyk-vuln-ids': allSnykVulnIds }, 'all vulnerability ids seen so far')

  const matrixContent = map(
    ({ name, version, vuln }) =>
      concat(
        `${name}@${version}`,
        map((id) => (R.findIndex((x) => x.id === id, vuln) > -1 ? '1' : '0'), allSnykVulnIds),
      ),
    nvVuln,
  )
  const matrix = concat([concat('', allSnykVulnIds)], matrixContent)

  log.info({ matrix }, 'data matrix')
  const csv = joinFP('\n', map((row) => joinFP(',', map(replace(',', '_'), row)), matrix))
  await writeFile(CSV_LIB_REPORT, csv, 'utf-8')
}

export const terminate: TerminateFn = () => () => {}
